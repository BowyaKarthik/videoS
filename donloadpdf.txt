import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;

public class DownloadAndReadPDF {
    public static void main(String[] args) {
        // Set up WebDriver (e.g., ChromeDriver)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        try {
            // Step 1: Navigate to the page and trigger the blob URL generation
            driver.get("http://example.com/page-with-pdf-blob");

            // Interact with the element that triggers the blob URL generation
            WebElement downloadButton = driver.findElement(By.id("downloadButtonId")); // Replace with your element's ID
            downloadButton.click();

            // Step 2: Extract the blob URL using JavaScript
            JavascriptExecutor js = (JavascriptExecutor) driver;
            String blobUrl = (String) js.executeScript("return document.querySelector('a').href;"); // Adjust the selector if needed

            // Step 3: Download the blob content
            if (blobUrl.startsWith("blob:")) {
                // The blob URL needs to be handled differently; here's a way to process it
                String base64Content = (String) js.executeScript(
                        "return fetch(arguments[0])" +
                        ".then(response => response.blob())" +
                        ".then(blob => new Promise((resolve, reject) => {" +
                        "    let reader = new FileReader();" +
                        "    reader.onloadend = () => resolve(reader.result);" +
                        "    reader.onerror = reject;" +
                        "    reader.readAsDataURL(blob);" +
                        "}));", blobUrl);

                // Remove the prefix from the base64 string (e.g., "data:application/pdf;base64,")
                String base64Data = base64Content.split(",")[1];

                // Decode and save the PDF
                byte[] pdfData = Base64.getDecoder().decode(base64Data);
                String filePath = "downloaded.pdf";
                try (FileOutputStream fos = new FileOutputStream(filePath)) {
                    fos.write(pdfData);
                    System.out.println("PDF downloaded successfully.");
                }

                // Step 4: Read the downloaded PDF using PDFBox
                File file = new File(filePath);
                PDDocument document = PDDocument.load(file);

                // Use PDFTextStripper to extract text from the PDF
                PDFTextStripper pdfStripper = new PDFTextStripper();
                String text = pdfStripper.getText(document);

                // Output the extracted text
                System.out.println("Extracted Text:\n" + text);

                // Close the document
                document.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.devtools.DevTools;
import org.openqa.selenium.devtools.v112.network.Network;

import java.util.Optional;

public class NetworkInterceptor {
    public static void main(String[] args) {
        // Set ChromeDriver path
        System.setProperty("webdriver.chrome.driver", "path_to_chromedriver");

        // Set Chrome Options
        ChromeOptions options = new ChromeOptions();
        ChromeDriver driver = new ChromeDriver(options);

        // Create DevTools session
        DevTools devTools = driver.getDevTools();
        devTools.createSession();

        // Enable Network Monitoring
        devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));

        // Add a listener for network response
        devTools.addListener(Network.responseReceived(), response -> {
            String url = response.getResponse().getUrl();
            if (url.contains("your_api_endpoint")) { // Replace with the actual API endpoint
                System.out.println("API URL: " + url);
                System.out.println("Status: " + response.getResponse().getStatus());
                System.out.println("Response Headers: " + response.getResponse().getHeaders());

                // Extract Bearer Token from headers if available
                if (response.getResponse().getHeaders().containsKey("Authorization")) {
                    String bearerToken = response.getResponse().getHeaders().get("Authorization").toString();
                    System.out.println("Bearer Token: " + bearerToken);
                }
            }
        });

        // Navigate to the page
        driver.get("https://example.com");

        // Close the browser after work
        driver.quit();
    }
}

  String script = "let originalFetch = window.fetch;" +
                "window.fetch = function() {" +
                "    return originalFetch.apply(this, arguments).then(response => {" +
                "        response.clone().json().then(data => {" +
                "            console.log('Response Data:', data);" +
                "        });" +
                "        return response;" +
                "    });" +
                "};";

        ((JavascriptExecutor) driver).executeScript(script);
