import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;

public class DownloadAndReadPDF {
    public static void main(String[] args) {
        // Set up WebDriver (e.g., ChromeDriver)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        try {
            // Step 1: Navigate to the page and trigger the blob URL generation
            driver.get("http://example.com/page-with-pdf-blob");

            // Interact with the element that triggers the blob URL generation
            WebElement downloadButton = driver.findElement(By.id("downloadButtonId")); // Replace with your element's ID
            downloadButton.click();

            // Step 2: Extract the blob URL using JavaScript
            JavascriptExecutor js = (JavascriptExecutor) driver;
            String blobUrl = (String) js.executeScript("return document.querySelector('a').href;"); // Adjust the selector if needed

            // Step 3: Download the blob content
            if (blobUrl.startsWith("blob:")) {
                // The blob URL needs to be handled differently; here's a way to process it
                String base64Content = (String) js.executeScript(
                        "return fetch(arguments[0])" +
                        ".then(response => response.blob())" +
                        ".then(blob => new Promise((resolve, reject) => {" +
                        "    let reader = new FileReader();" +
                        "    reader.onloadend = () => resolve(reader.result);" +
                        "    reader.onerror = reject;" +
                        "    reader.readAsDataURL(blob);" +
                        "}));", blobUrl);

                // Remove the prefix from the base64 string (e.g., "data:application/pdf;base64,")
                String base64Data = base64Content.split(",")[1];

                // Decode and save the PDF
                byte[] pdfData = Base64.getDecoder().decode(base64Data);
                String filePath = "downloaded.pdf";
                try (FileOutputStream fos = new FileOutputStream(filePath)) {
                    fos.write(pdfData);
                    System.out.println("PDF downloaded successfully.");
                }

                // Step 4: Read the downloaded PDF using PDFBox
                File file = new File(filePath);
                PDDocument document = PDDocument.load(file);

                // Use PDFTextStripper to extract text from the PDF
                PDFTextStripper pdfStripper = new PDFTextStripper();
                String text = pdfStripper.getText(document);

                // Output the extracted text
                System.out.println("Extracted Text:\n" + text);

                // Close the document
                document.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.devtools.DevTools;
import org.openqa.selenium.devtools.v112.network.Network;

import java.util.Optional;

public class NetworkInterceptor {
    public static void main(String[] args) {
        // Set ChromeDriver path
        System.setProperty("webdriver.chrome.driver", "path_to_chromedriver");

        // Set Chrome Options
        ChromeOptions options = new ChromeOptions();
        ChromeDriver driver = new ChromeDriver(options);

        // Create DevTools session
        DevTools devTools = driver.getDevTools();
        devTools.createSession();

        // Enable Network Monitoring
        devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));

        // Add a listener for network response
        devTools.addListener(Network.responseReceived(), response -> {
            String url = response.getResponse().getUrl();
            if (url.contains("your_api_endpoint")) { // Replace with the actual API endpoint
                System.out.println("API URL: " + url);
                System.out.println("Status: " + response.getResponse().getStatus());
                System.out.println("Response Headers: " + response.getResponse().getHeaders());

                // Extract Bearer Token from headers if available
                if (response.getResponse().getHeaders().containsKey("Authorization")) {
                    String bearerToken = response.getResponse().getHeaders().get("Authorization").toString();
                    System.out.println("Bearer Token: " + bearerToken);
                }
            }
        });

        // Navigate to the page
        driver.get("https://example.com");

        // Close the browser after work
        driver.quit();
    }
}

  String script = "let originalFetch = window.fetch;" +
                "window.fetch = function() {" +
                "    return originalFetch.apply(this, arguments).then(response => {" +
                "        response.clone().json().then(data => {" +
                "            console.log('Response Data:', data);" +
                "        });" +
                "        return response;" +
                "    });" +
                "};";

        ((JavascriptExecutor) driver).executeScript(script);
String tokenScript = "return localStorage.getItem('authToken');";

// Retrieve all keys stored in localStorage
List<String> keys = (List<String>) ((JavascriptExecutor) driver).executeScript(
    "return Object.keys(localStorage);"
);

for (String key : keys) {
    System.out.println("localStorage Key: " + key);
}
  public String getItemFromLocalStorage(String key) {
    return (String) js.executeScript(String.format(
        "return window.localStorage.getItem('%s');", key));
  }
import net.lightbody.bmp.BrowserMobProxy;
import net.lightbody.bmp.BrowserMobProxyServer;
import net.lightbody.bmp.client.ClientUtil;
import net.lightbody.bmp.core.har.Har;
import net.lightbody.bmp.core.har.HarEntry;
import org.openqa.selenium.Proxy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import io.github.bonigarcia.wdm.WebDriverManager;

public class CaptureTokenMidScript {

    public static void main(String[] args) {
        // Start BrowserMob Proxy
        BrowserMobProxy proxy = new BrowserMobProxyServer();
        proxy.start(0);  // Starts on any available port

        // Configure Selenium to use BrowserMob Proxy
        Proxy seleniumProxy = ClientUtil.createSeleniumProxy(proxy);
        WebDriverManager.edgedriver().setup();
        EdgeOptions options = new EdgeOptions();
        options.setProxy(seleniumProxy);

        WebDriver driver = new EdgeDriver(options);

        // Enable HAR (HTTP Archive) to capture network traffic
        proxy.newHar("token_capture");

        // Navigate to your application (where the token is expected to be retrieved in between)
        driver.get("https://example.com");  // Replace with your app's URL

        // Perform actions leading to the API call (such as login or interaction that triggers the token retrieval)
        // E.g., driver.findElement(By.id("login")).click();

        // After triggering the token-generating API call, retrieve the HAR
        Har har = proxy.getHar();

        // Iterate over the HAR entries to find the API call that contains the token
        for (HarEntry entry : har.getLog().getEntries()) {
            String requestUrl = entry.getRequest().getUrl();
            if (requestUrl.contains("your_api_endpoint")) {  // Replace with the actual API endpoint URL
                System.out.println("API URL: " + requestUrl);

                // Check for Authorization header in the response or request
                entry.getResponse().getHeaders().forEach(header -> {
                    if (header.getName().equalsIgnoreCase("Authorization")) {
                        String authorizationHeader = header.getValue();
                        if (authorizationHeader.startsWith("Bearer")) {
                            String bearerToken = authorizationHeader.substring("Bearer ".length());
                            System.out.println("Bearer Token: " + bearerToken);
                        }
                    }
                });

                // Alternatively, if the token is in the response body (e.g., JSON)
                String responseBody = entry.getResponse().getContent().getText();
                if (responseBody.contains("access_token")) {
                    // Extract token from JSON response (you can use a JSON parser like Jackson or Gson here)
                    String bearerToken = responseBody.split("\"access_token\":\"")[1].split("\"")[0];
                    System.out.println("Bearer Token from body: " + bearerToken);
                }
            }
        }

        // Continue with your test script, now having access to the token if needed

        // Stop the proxy and close the browser
        proxy.stop();
        driver.quit();
    }
}
import java.io.File;

public static boolean isFileDownloaded(String downloadPath, String fileName) {
    File dir = new File(downloadPath);
    File[] dirContents = dir.listFiles();

    if (dirContents != null) {
        for (File file : dirContents) {
            if (file.getName().equals(fileName)) {
                return true;
            }
        }
    }
    return false;
}
 EdgeOptions options = new EdgeOptions();
        Map<String, Object> prefs = new HashMap<>();

        prefs.put("plugins.always_open_pdf_externally", true);  // Disable PDF viewer
        prefs.put("download.default_directory", "/path/to/download/directory");  // Set download directory
        prefs.put("download.prompt_for_download", false);  // Disable download prompt
        prefs.put("profile.default_content_setting_values.automatic_downloads", 1);  // Allow automatic downloads
        prefs.put("profile.content_settings.exceptions.automatic_downloads.*.setting", 1);  // Allow downloads from all sites

        options.setExperimentalOption("prefs", prefs);
        options.addArguments("--disable-extensions");  /



public class TestExecutor {

    private String testResultId;  // To store the TestResult ID

    // Other class-level variables...
	@Before
public void setup() {
    // Create the test case result and get the TestResult ID
    this.testResultId = createTestResult();
}

public String createTestResult() {
    // Use the Azure DevOps API to create the test result
    HttpClient client = HttpClient.newHttpClient();

    String requestBody = """
    [
      {
        "testCaseTitle": "Login Test Case",
        "automatedTestName": "com.example.selenium.LoginTest",
        "outcome": "InProgress",  // Placeholder outcome, as test hasn't finished
        "state": "InProgress"
      }
    ]
    """;

    HttpRequest request = HttpRequest.newBuilder()
        .uri(URI.create("https://dev.azure.com/{organization}/{project}/_apis/test/runs/{runId}/results?api-version=7.0"))
        .header("Authorization", "Basic " + auth)
        .header("Content-Type", "application/json")
        .POST(HttpRequest.BodyPublishers.ofString(requestBody))
        .build();

    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
    String responseBody = response.body();

    // Parse the response to get the TestResult ID
    JSONObject json = new JSONObject(responseBody);
    return json.getJSONArray("value").getJSONObject(0).getString("id");
}
@AfterStep
public void updateTestStepStatus(Scenario scenario) {
    int stepIndex = getCurrentStepIndex(scenario);  // Method to track current step number
    String outcome = scenario.isFailed() ? "Failed" : "Passed";
    String errorMessage = scenario.isFailed() ? scenario.getName() + " failed." : null;

    updateTestStep(stepIndex, outcome, errorMessage);
}

public void updateTestStep(int stepId, String outcome, String errorMessage) throws Exception {
    HttpClient client = HttpClient.newHttpClient();

    String requestBody = String.format("""
    {
      "actionResults": [
        {
          "iterationId": 1,
          "stepId": %d,
          "outcome": "%s",
          "errorMessage": "%s"
        }
      ]
    }
    """, stepId, outcome, errorMessage == null ? "" : errorMessage);

    HttpRequest request = HttpRequest.newBuilder()
        .uri(new URI("https://dev.azure.com/{organization}/{project}/_apis/test/runs/{runId}/results/" + testResultId + "?api-version=7.0"))
        .header("Authorization", "Basic " + auth)
        .header("Content-Type", "application/json")
        .method("PATCH", HttpRequest.BodyPublishers.ofString(requestBody))
        .build();

    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
    System.out.println("Step Result Updated: " + response.body());
}
@After
public void tearDown(Scenario scenario) {
    String finalOutcome = scenario.isFailed() ? "Failed" : "Passed";
    updateTestResult(finalOutcome);
}

public void updateTestResult(String outcome) throws Exception {
    HttpClient client = HttpClient.newHttpClient();

    String requestBody = String.format("""
    [
      {
        "id": %s,
        "outcome": "%s",
        "state": "Completed"
      }
    ]
    """, testResultId, outcome);

    HttpRequest request = HttpRequest.newBuilder()
        .uri(new URI("https://dev.azure.com/{organization}/{project}/_apis/test/runs/{runId}/results/" + testResultId + "?api-version=7.0"))
        .header("Authorization", "Basic " + auth)
        .header("Content-Type", "application/json")
        .method("PATCH", HttpRequest.BodyPublishers.ofString(requestBody))
        .build();

    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
    System.out.println("Final Test Result Updated: " + response.body());
}

}




js.executeScript("document.body.style.transform = 'scale(0.8)'; document.body.style.transformOrigin = '0 0';");
 
